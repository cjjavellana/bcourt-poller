#! /usr/bin/env python3.3

import urllib.request,urllib.parse
from bs4 import BeautifulSoup
from twitter import *
from package import *
from datetime import datetime

#Setup the request parameters

play_date = '21/7/2013'
validate_hidden_date = '7/21/2013'
start_time_hh = '04'
start_time_mm = '00'
start_time_meridian = 'PM'
end_time_hh = '06'
end_time_mm = '00'
end_time_meridian = 'PM'

#Activity 18 - Badminton,Venue 542 - Pasir Ris 
req_params = urllib.parse.urlencode({'ctl00$ScriptManager1':'ctl00$ContentPlaceHolder1$updPnlAvailabilityCheck|ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$btnSearch',\
'ctl00$wctrlLogin$Login1$UserName':'',\
'ctl00$wctrlLogin$Login1$Password':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$ddlActivity':'18',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$ddlVenue':'542',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$dateCtl$CalendarPopup1$textBox':play_date,\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$dateCtl$CalendarPopup1$hidden':play_date,\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$dateCtl$CalendarPopup1$validateHidden':validate_hidden_date,\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$dateCtl$CalendarPopup1$enableHidden':'true',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$timeCtlStart$ddlHour': start_time_hh,\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$timeCtlStart$ddlMin': start_time_mm,\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$timeCtlStart$ddlMeridian': start_time_meridian,\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$timeCtlEnd$ddlHour': end_time_hh,\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$timeCtlEnd$ddlMin': end_time_mm,\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$timeCtlEnd$ddlMeridian':end_time_meridian,\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdfBookAdv':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdfIsSuperiorSubscriber':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdfVenueSubscriberType':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdfListSearchType':'ORD',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdRepSubscriberId':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdRepActivityId':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdRepSubscriberName':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdRepActivityName':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdIsReplacement':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdIsReplacementReload':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdRepBkgCancelledId':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdfCriteriaNotMatch':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdfIsBlacklistedHirerBook':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdfEffDateFrom':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdfEffDateTo':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdfIsAdvHrBookingAllowed':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdfLeadTimeAccess':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdfSubscriberId':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdfHirerAge':'',\
'hidPrinterStatus':'',\
'hidPrinterVerification':'',\
'hidNetsStatus':'',\
'hidNetsVerfication':'',\
'hidEzlinkStatus':'',\
'hidEzlinkVerification':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdfHiredId':'',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$hdfHirerType':'',\
'ctl00$ContentPlaceHolder1$hdRblSelectedValue':'',\
'ctl00$ContentPlaceHolder1$hidAvailTerminals':'',\
'hidAvailTerminalsId':'ctl00_ContentPlaceHolder1_hidAvailTerminals',\
'ctl00$RESET_SESSION':'NIL',\
'ctl00$AccNm':'',\
'ctl00$hdfErrMsgAJAX':'',\
'__REFRESH_FIELD':'2781e6abbd661d845107066b1c6b00a3',\
'__EVENTTARGET':'',\
'__EVENTARGUMENT':'',\
'__LASTFOCUS':'',\
'__VIEWSTATE':'',\
'__PREVIOUSPAGE':'dT7sUn7RZVoZ41GfdHOkMywZstCj-Ew5TKVOHQWYKDKw9tNTKN_JsTvJcvfohl8zkLUMHEQfAKHBuyJ_XoXLaB4v3fEZOIVcqgKnrkWn1RXqxduBcnyTwzOexdRD42xx9lQqJw2',\
'__EVENTVALIDATION':'hSuEHUING0T+FLAMiTllEUaAr3/YUp4c03Ec33zKGcne/gJ+uqmFhJ8QBqyH4G42hnl4EclMcWB1FE5rTqGloNdb/mk7qCUNHe/xeJl7BrknlpLTcD5y2e/2o58jwx8tUROQ+mVq8NGiJn6GOFIc5yO7egKiAR4D4qkkMd2iHTgfOKOpWWIW2L1yoUPaqCERvDQTuDyPjhCRI9Q/AHw7SWV139XrLxcpVpcKSMHNsDoCNe1jl/yAxCfeGWlNz6xuNVO8URN2TnbDoWe4ehWrn9uk0PUhlnA7Gxzdpf69fawea4H0tSc2BsyeH9mzwlXiLHggCUWUA6tcCr6WzTescJwAL43FPDtO7Ary0ctsoi7DkGHypDqftt+td0PL0fMpzIX4jy2YxEDN8i6CqmLAXHtygygy0Dgc2aIqE1f7zRZlb6I+M9v/uDdz3Y58mzRQ2wlmwjnoOlhDeKLtxaYkgrSNlL9W9YKnlEKw6XF7g03tO9c9HFM+Qz3wxMxKqNjMA5lEUjOAevqsybLFdaSNCYWnjt9e9O0g8hHyGDnYx2FgY9t4+WJ97vQN3Y5lQ9yR/EIzq1fCSPsPiaurToyiJhJBIrSlufm451tJX0LJdbZ1Wcz70S8oK/yajBx7wRl9lOCSe/4zLk4lKnapgrufQFyu+bS0Y0i12tXP1xdtSpSQdXH0Nn2IPtCS0AHxqMEt5dd6H+1YepI4i5R/mgRsSTrfvPwv3f9DPG34GYBp2j7wKni+EzfOdTI8bd/NmK0UR2K2Hz1Um/RtRqi4lBkyZ3DZd7NWfJvVYSAL+m2CA/yPor57QP8K3t8yZvCNiyS3SXXuwK/hF9/nVyuLrpRt/olPCkMfz8ZFDZud6QpFY/cDo8PY4/DF1NAQL02YrWsIaLyJg+NsjQbr/PMwy3mvTWhpAZ0DYzAwmb3GILCBrUg+dzRrLlF7Q2Yo6Q0h3Fx6xGOLWgefMNN8GkUbBz6xKpc727fJyM1fgd+PdAY0lHncKSXaw4++dLv6Jiw2P93yOd8nIbk6mCpYDnzS0M382dEZY/7aDd/2J2sePsawLbd21srRJc9Aec6ODY9IsLASgJNiyNveLsa+YxmPc97OyLAWDoOxODV5JRAc/oJvwsrqxKY3UO2qQ1pgMy+MoQoeOakf9+7CgGukCOc9/uK9LqCXHTXEnGnpTTdf/3d1oO7MkEQmM+kt8Ej6+25IgGabXXcuvnKDyMiwz1KLRV+n+Kmmh4NF437NYqJ+TWTwAajXIfbfP+tLyH3TD/MIs8IXO4OmxqUffiFjN6xfZ3jNmj3oBxsrf3FeVKwClFSLvMflzKPjTHE+Qy1jiFuH/Q7mVLCRGQ5/BagK3Tt4zbxlzna57kh530LioW9wD8e8bExGILPIaO+Cd1sQ4ZCG4dEQZeiwz1CJuGLvNNmn9inbQYkPqLUsiAZtpdaZICIpguXAv9y6SjjEy6fInPOploe7cZ5rMXh6hb7+NIhKYn7E3sLuwMw70TUTaRxiacRoGJEHFhbI7eexjdNFvqeNOhn1EEAYKkc8HwwFFJTPhk1MDBdz6HZYmg3wgb1giHMTaNQTqGNFDAsyiqSo4SPCt49Dx/otH1fMuMCml6KsIoi8KrAFT+HnpS0/BttnRgXEkJsBeB3HhxFHL9w67sREY+oWUCIPv7GaXDrHGHd2O4bCFrP+6siM3NJbOvF20xxYMVpTMnGoVNjs2b/tprQxhGXkV40bfb/qwLjzqPTDWrrt4yESIL8F/t5LRK4MjUFEuPkvKfndIHNK2JOn3J7FCMVPijB8KNnXWF5hj5sDX9G4I5GAPyrWOyWmZgkpOlNoMN2LyAGoOPBSHgMC1RZiy3kdMM9ROuicILdsdYI8JHylxYm5WJg+UcbTfP3/MLuFQY5jLfZeu1h04xlMAvHenrP42vcH25T65fxDqhgpE19tIGiCEXO6M44Hrd1gipxILgXc7YsQNfyWBxlHOy6Hz+Cs1KWNyw==',\
'__ASYNCPOST':'true',\
'ctl00$ContentPlaceHolder1$AvailabilityCheckCtl$btnSearch':'Search'})

#build the http request
req_params = req_params.encode('utf-8')
request = urllib.request.Request("http://www.icanbook.com.sg/icbnew/Facility/Public/UI/AvailabilityCheck.aspx")
request.add_header("Content-Type","application/x-www-form-urlencoded;charset=utf-8")
request.add_header("Referer","http://www.icanbook.com.sg/icbnew/Facility/Public/UI/AvailabilityCheck.aspx")
request.add_header("User-Agent","Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36")
request.add_header("X-MicrosoftAjax","Delta=true")

#open the connection
f = urllib.request.urlopen(request, req_params)

#Parse the response
response = f.read().decode('utf-8')
soup = BeautifulSoup(response.encode('utf-8'))
#print(soup.prettify())
result_table = soup.select('#ctl00_ContentPlaceHolder1_gvAvailabilityCheckResult tr')

OAUTH_TOKEN = '1558071919-2XMmBP4GSphhiaz2uOZpBZmMdFIj76qlQYB6Xry'
OAUTH_SECRET = 'Ogs3MEmUF10wXcEG9mpMp9TpIlBXytVcyYEU2IqTtY'
CONSUMER_KEY = 'uNN3wAoVE0CVKMQss1w'
CONSUMER_SECRET = '6Ta6vHITkwbujGLVnIzb1XMjXqUXVhvKTz7VZ3s4sE'
t = Twitter(auth=OAuth(OAUTH_TOKEN, OAUTH_SECRET, CONSUMER_KEY, CONSUMER_SECRET))

for child in result_table :
    img_list = child.select('td img')
    if(len(img_list) > 0 ) :
        court_num = child.select('td span')[0]
        time_slot = child.select('td span')[1]
        print(court_num.text + ' '+ time_slot.text + ' '+ img_list[0]['title'])
        print('===============================')


#t.direct_messages.new(user='twitting4fun',text='first tweet from pi')

time_generator = TimeGenerator()
date_generator = GameDateGenerator()

print(time_generator.get_game_time_frame().start_time)
print(date_generator.get_game_date())

today = datetime.today()

#t.statuses.update(status="Checking for available court commencing at " + today.strftime("%d/%m/%Y %H:%M:%S"))
print("Checking for available court commencing at " + today.strftime("%d/%m/%Y %H:%M:%S"))
#venue_checker = VenueChecker('542')
#venue_checker.find_available_time()

